---
title: "Running seahtrue functions"
webr:
  packages: ['tidyverse']
editor: 
  mode: source  

---

In this section we will work directly with the functions from the `seahtrue` package, since we didn't make the package available via webr/wasm, we cannot do a library call to the `seahtrue` package. Instead we just load all three functions manually here in our session. The loading and running should go pretty fast!!

## code

You can click on the `Run code` to get all functions into the memory of your session. Since R uses `lazy evaluation` what happens is that just a bunch a text is assigned to the function name and there is no evaluation of the code. That also means that it is quickly run. I have a small text output to see that indeed the code has been run.

### read_xf_plate()

``` {webr-r}


read_xfplate <- function(filepath_seahorse) {

    # read data
    xf_raw <- get_xf_raw(filepath_seahorse)
    xf_rate <- get_xf_rate(filepath_seahorse) #outputs list of 2
    xf_norm <- get_xf_norm(filepath_seahorse) #outputs list of 2
    xf_buffer <- get_xf_buffer(filepath_seahorse)
    xf_inj <- get_xf_inj(filepath_seahorse)
    xf_pHcal <- get_xf_pHcal(filepath_seahorse)
    xf_O2cal <- get_xf_O2cal(filepath_seahorse)
    #xf_flagged <- get_xf_flagged(filepath_seahorse)
    xf_assayinfo <- get_xf_assayinfo(filepath_seahorse,
                                     norm_available = xf_norm[[2]],
                                     xls_ocr_backgroundcorrected = xf_rate[[2]])
    xf_norm <- xf_norm[[1]]
    xf_rate <- xf_rate[[1]]

    # make the output list
    xf <- list(
      raw = xf_raw,
      rate = xf_rate,
      assayinfo = xf_assayinfo,
      inj = xf_inj,
      pHcal = xf_pHcal,
      O2cal = xf_O2cal,
      norm = xf_norm,
      flagged = "empty",
      buffer = xf_buffer,
      filepath_seahorse = filepath_seahorse
    )

    return(xf)

}

get_xf_raw <- function(filepath_seahorse){

    xf_raw <- readxl::read_excel(filepath_seahorse,
                         sheet = "Raw")
}

get_xf_norm <- function(filepath_seahorse){

    norm_info <- get_platelayout_data(filepath_seahorse,
                                      my_sheet = "Assay Configuration",
                                      my_range = "B84:N92",
                                      my_param = "cell_n")


    if (sum(is.na(norm_info$cell_n)) >90){
      norm_available <- FALSE
    } else {
      norm_available <- TRUE}

    xf_norm <- list(norm_info, norm_available)

    return(xf_norm)
}

get_originalRateTable <- function(filepath_seahorse){

  original_rate_df <- readxl::read_excel(filepath_seahorse, sheet = "Rate")

  # because rate data can be either background corrected or not this should be checked first
  # first verify whether a "Background" group exists in the  original_rate_df

  if ("Background" %in% {original_rate_df$Group %>% unique()}) {

    check_background <- original_rate_df %>%
      dplyr::filter(Group == "Background") %>%
      dplyr::select(OCR) %>%
      dplyr::reframe(mean = mean(OCR)) %>%
      dplyr::pull(mean)

    if (check_background == 0) {
      corrected_allready <- TRUE
    } else {
      corrected_allready <-  FALSE
    }

  } else {

    #in case when there is no Background group we work with the original data
    # that is in the input file "Rate" sheet
    # please note that there will be warning logged, but the columns will be
    # labeled incorrectly as if the data is background corrected

    corrected_allready <-  TRUE

  }

  if (corrected_allready == TRUE){
    colnames(original_rate_df) <-
      c("measurement","well", "group",
        "time_wave", "OCR_wave_bc",
        "ECAR_wave_bc", "PER_wave_bc")
    original_rate_df <- original_rate_df %>%
      dplyr::mutate(OCR_wave = 0, ECAR_wave = 0)

    original_rate_df <- original_rate_df %>%
      dplyr::select(measurement, well, group,
                    time_wave, OCR_wave, OCR_wave_bc,
                    ECAR_wave, ECAR_wave_bc)

  } else{
    colnames(original_rate_df) <-
      c("measurement","well", "group",
        "time_wave", "OCR_wave",
        "ECAR_wave", "PER_wave")

    #do background substraction forr wave table
    background <- original_rate_df %>%
      dplyr::filter(group=="Background") %>%
      dplyr::group_by(measurement) %>%
      dplyr::reframe(bkg_OCR_wave = mean(OCR_wave),
                       bkg_ECAR_wave = mean(ECAR_wave)
      )
    original_rate_df <- dplyr::left_join(original_rate_df,
                                         background,
                                         by = c("measurement"), copy = TRUE)

    original_rate_df$OCR_wave_bc <- original_rate_df$OCR_wave - original_rate_df$bkg_OCR_wave
    original_rate_df$ECAR_wave_bc <- original_rate_df$ECAR_wave - original_rate_df$bkg_ECAR_wave

    original_rate_df <- original_rate_df %>%
      dplyr::select(measurement, well, group,
                    time_wave, OCR_wave, OCR_wave_bc,
                    ECAR_wave, ECAR_wave_bc)
  }

  original_rate_df_list <- list(original_rate_df, corrected_allready)

  return(original_rate_df_list)

}

get_xf_rate <- function(filepath_seahorse){
    
  #first item is table, second item is background_corrected logical
    xf_rate_list <- get_originalRateTable(filepath_seahorse)

    return(xf_rate_list)
}

get_xf_buffer <- function(filepath_seahorse){

    bufferfactor_info <- get_platelayout_data(filepath_seahorse,
                                              my_sheet = "Assay Configuration",
                                              my_range = "B96:N104",
                                              my_param = "bufferfactor")

    return(bufferfactor_info)

}

get_xf_pHcal <- function(filepath_seahorse){

  pH_calibration <- get_platelayout_data(filepath_seahorse,
                                         my_sheet = "Calibration",
                                         my_range = "P16:AB24",
                                         my_param = "pH_cal_em")

  return(pH_calibration)
}

get_xf_O2cal <- function(filepath_seahorse){


  O2_calibration <- get_platelayout_data(filepath_seahorse,
                                         my_sheet = "Calibration",
                                         my_range = "B7:N15",
                                         my_param = "O2_cal_em")


  return(O2_calibration)
}

get_xf_inj <- function(filepath_seahorse, injscheme = "HAP"){


  #command_index in "Operation Log" sheet give numbers to the phases in a seahorse exp
  # each command (eg. "mix", "measure") gets the command_index for that phase
  # 0 = moving operation
  # 1 = calibration
  # 2 = baseline
  # 3 = injection 1
  # 4 = injection 2
  # 5 = injection 3
  # 6 = injection 4

  #read injection strategy and measurements from "Operation Log" sheet
  info_sh<-readxl::read_excel(filepath_seahorse, sheet = "Operation Log")
  colnames(info_sh) <- c("instruction_name","command_name",
                         "command_index","start_time","end_time",
                         "completion_status")

  if (injscheme == "HAP"){
    #assumes injection names are available in operation log file (this is the case for most experiments)
    measurement_info <- dplyr::filter(info_sh, command_name == "Measure")
    measurement_info$interval <- measurement_info$command_index -1
    measurement_info$measurement <- 1:nrow(measurement_info)
    measurement_info <- measurement_info %>% dplyr::select(measurement, interval, injection=instruction_name)
  }

  if (injscheme == "manual"){

    #in case there is no command index in "opertion log"
    command_names <- c("XF - PC_Measure", "XF - PC_Inject")
    measurement_info <- dplyr::filter(info_sh, command_name %in% command_names)

    # "PC - inject" has a number as command_index
    # "PC - measure" command_index == 0
    # I use that to set the command_index
    interval = 1
    for (i in 1:nrow(measurement_info)){
      if(measurement_info$command_index[i] == 0){
        measurement_info$command_index[i] <-  interval } else {
          interval <-  interval +1
          measurement_info$command_index[i] <-  interval}
    }
    colnames(measurement_info)[3] <- "interval"
    measurement_info <- dplyr::filter(measurement_info, command_name == "XF - PC_Measure")
    measurement_info$measurement <- 1:nrow(measurement_info)
    measurement_info <- measurement_info %>% dplyr::select(measurement, interval)

    #gives name of the injection manually
    # case mitostress
    injections <- c("basal", "OM", "FCCP", "AM/rot")
    injections_mitostress <- tibble::tibble(interval = 1:4, injection=c("basal", "OM", "FCCP", "AM/rot"))
    measurement_info <- dplyr::left_join(measurement_info, injections_mitostress, by = c("interval"))

    ## case glycostress
    #injections <- c("basal", "glucose", "OM", "2DG")
    #injections_glycostress <- tibble(interval = 1:4, injection=injections)
    #measurement_info <- left_join(measurement_info, injections_glycostress, by = c("interval"))
  }

  return(measurement_info)

}

get_xf_assayinfo <- function(filepath_seahorse,
                             date_style = "empty",
                             instrument = "XFe96",
                             norm_available,
                             xls_ocr_backgroundcorrected) {


  if (instrument == "XFHSmini"){
    gain1_cell <-  "D68"
    gain2_cell <-  "E68"
  }

  if (instrument == "XFe96"){
    gain1_cell <-  "D70"
    gain2_cell <-  "E70"
  }

  # read Assay Configuration sheet
    meta_df <- readxl::read_excel(filepath_seahorse,
                          sheet = "Assay Configuration",
                          col_names = c("parameter", "value"),
                          range = "A1:B83"
    )

 

  meta_df <- meta_df[!is.na(meta_df$parameter), ]

  # read Assay Configuration sheet gain1

    gain1 <- readxl::read_excel(filepath_seahorse,
                        sheet = "Assay Configuration",
                        col_names = c("value"),
                        range = gain1_cell
    )
    
  # read Assay Configuration sheet gain2

    gain2 <- readxl::read_excel(filepath_seahorse,
                        sheet = "Assay Configuration",
                        col_names = c("value"),
                        range = gain2_cell
    )



  # read target emission cells
  O2_target_emission <- readxl::read_excel(filepath_seahorse,
                                   sheet = "Calibration",
                                   col_names = FALSE,
                                   range = "B4"
  )



  # read pH target emission cells
    pH_target_emission <- readxl::read_excel(filepath_seahorse,
                                     sheet = "Calibration",
                                     col_names = FALSE,
                                     range = "P4"


    )

  F0 <- as.double(meta_df$value[meta_df$parameter == "Calculated FO"])
  V_C <- as.double(meta_df$value[meta_df$parameter == "Pseudo Volume"])
  Tau_AC <- as.double(meta_df$value[meta_df$parameter == "TAC"])
  Tau_W <- as.double(meta_df$value[meta_df$parameter == "TW"])
  Tau_C <- as.double(meta_df$value[meta_df$parameter == "TC"])
  Tau_P <- as.double(meta_df$value[meta_df$parameter == "TP"])
  KSV_original <- as.double(meta_df$value[meta_df$parameter == "ksv"])
  KSV_corrected <- as.double(meta_df$value[meta_df$parameter == "Corrected Ksv"])
  KSV_tempCorrection <- as.logical(meta_df$value[meta_df$parameter == "Ksv Temp Correction"])
  KSV <- KSV_corrected

  pH_0 <- as.double(meta_df$value[meta_df$parameter == "Calibration pH"])
  pH_plateVolume <- as.double(meta_df$value[meta_df$parameter == "Plate Volume"])
  pH_kVol <- as.double(meta_df$value[meta_df$parameter == "kVol"])


  plate_id <- meta_df$value[meta_df$parameter == "Plate Barcode"]
  cartridge_barcode <- meta_df$value[meta_df$parameter == "Cartridge Barcode"]
  assay_name <- meta_df$value[meta_df$parameter == "Assay Name"]
  instrument_serial <- meta_df$value[meta_df$parameter == "Instrument Serial"]

  pH_targetEmission <- as.double(pH_target_emission[[1]])
  O2_targetEmission <- as.double(O2_target_emission[[1]])
  gain1 <- as.double(gain1[[1]])
  gain2 <- as.double(gain2[[1]])

  # other constants
  O2_0_mmHg <- 151.6900241
  O2_0_mM <- 0.214

  if (date_style == "US"){
    date_run <- lubridate::mdy_hm(meta_df$value[meta_df$parameter == "Last Run"])
    logger::log_info("Converted date to US format (US = mdy_hm, NL = dmy_hm).") # (Date-time column)
    #be carefull with the data format in excel! either mdy or dmy
  }

  if (date_style == "NL"){
    date_run <- lubridate::dmy_hm(meta_df$value[meta_df$parameter == "Last Run"])
    logger::log_info("Converted date to NL format (US = mdy_hm, NL = dmy_hm).") # (Date-time column)
    #be carefull with the data format in excel! either mdy or dmy
  }

  if (date_style == "empty"){
    date_run <- meta_df$value[meta_df$parameter == "Last Run"] # (Character instead of date-time column)
    logger::log_info("Date-style is empty, no date conversion was performed. Format is 'character' instead of 'date'.")
    #be carefull with the data format in excel! either mdy or dmy
  }

  if(instrument == "XFHSmini"){
    tibbler <- tibble::tibble(
      F0 = 4.63e04,
      V_C = 9.15,
      Tau_AC = 746,
      Tau_W = 296,
      Tau_C = 246,
      Tau_P = 60.9,
      KSV = 2.06e-02,
      KSV_corrected = 2.06e-02,
      KSV_original = 2.06e-02,
      KSV_tempCorrection = FALSE,
      gain1,
      gain2,
      pH_0,
      pH_plateVolume,
      pH_kVol,
      pH_targetEmission,
      O2_targetEmission,
      plate_id,
      cartridge_barcode,
      date_run,
      assay_name,
      instrument_serial,
      O2_0_mmHg,
      O2_0_mM
    )

  }
  if(instrument == "XFe96"){
    tibbler <- tibble::tibble(
      F0,
      V_C,
      Tau_AC, Tau_W,
      Tau_C, Tau_P,
      KSV,
      KSV_tempCorrection,
      KSV_original,
      gain1,
      gain2,
      pH_0,
      pH_plateVolume,
      pH_kVol,
      pH_targetEmission,
      O2_targetEmission,
      plate_id,
      cartridge_barcode,
      date_run,
      assay_name,
      instrument_serial,
      O2_0_mmHg,
      O2_0_mM
    )
  }


  tibbler$norm_available <- norm_available
  tibbler$xls_ocr_backgroundcorrected <- xls_ocr_backgroundcorrected


  return(tibbler)
}

get_platelayout_data <- function(filepath_seahorse, my_sheet, my_range, my_param ){

      df <- readxl::read_excel(filepath_seahorse, sheet = my_sheet, range = my_range)

      colnames(df)[1] <- "firstCol"

      df <-  tidyr::gather(df, key = "key", value = "my_value", -firstCol) %>%
        dplyr::mutate(firstCol = paste0(firstCol, key) ) %>%
        dplyr::select(well = firstCol, my_value) %>%
        dplyr::arrange(gsub("\\d", "", well, as.numeric(gsub("\\D", "", well))))

      colnames(df)[2] <- my_param

      # add a zero between letter and number if wellname has 2 characters for normalization data
      for (i in 1:nrow(df)){
        if (nchar(df$well[i]) ==  2) {
          wellName <- sub("(.{1})(.*)", "\\10\\2", df$well[i])
        } else {
          wellName <- df$well[i]
        }
        df$well[i] <- wellName
      }

     return(df)

}

print("read_xfplate is ready")


```


### preprocess_xfplate()


``` {webr-r}

preprocess_xfplate <- function(xf){
  

  # Use our xf list from read_xfplate() with all the necessary Seahorse data to fill this data tibble.
  
  xf_raw_pr <- preprocess_xf_raw(xf$raw,
                                 xf$pHcal,
                                 xf$inj,
                                 xf$assayinfo,
                                 xf$buffer,
                                 xf$norm,
                                 xf$flagged)

  xf_rate_pr <- preprocess_xf_rate(xf$rate,
                                   xf$norm,
                                   xf$flagged)

  xf_plate_pr <- xf_raw_pr %>%
    dplyr::group_by(plate_id) %>%
    tidyr::nest() %>%
    dplyr::mutate(filepath_seahorse = list(tibble::tibble(
                  directory_path = dirname(as.character(xf$filepath_seahorse)),
                  base_name = basename(as.character(xf$filepath_seahorse)),
                  full_path = xf$filepath_seahorse
                )),
                  date = xf$assayinfo$date_run,
                  assay_info = list(tibble::tibble(xf$assayinfo)),
                  rate_data = list(tibble::tibble(xf_rate_pr)),
                  injection_info = list(tibble::tibble(xf$inj))) %>%
    dplyr::select(plate_id, filepath_seahorse, date, assay_info, injection_info,
                  raw_data = data, rate_data)
  

  return(xf_plate_pr)
}

preprocess_xf_raw <- function(xf_raw,
                              xf_pHcal,
                              xf_inj,
                              xf_assayinfo,
                              xf_buffer,
                              xf_norm,
                              xf_flagged) {
  
      
  # convert the original integer column to integers again, instead of double
  xf_raw_pr <- xf_raw #VB did original did not work in webr ?!

  # rename columns
  xf_raw_pr <- rename_columns(xf_raw_pr)

  # convert time column
  xf_raw_pr <- convert_timestamp(xf_raw_pr)

  # correct pH_em_corr
  xf_raw_pr$pH_em_corr_corr <- correct_pH_em_corr(xf_raw_pr$pH_em_corr,
                                                  xf_pHcal$pH_cal_em,
                                                  xf_assayinfo$pH_targetEmission[1])


  # calculate backgrounds and join
  background <- calc_background(xf_raw_pr)

  xf_raw_pr <- xf_raw_pr %>%
    dplyr::left_join(background, by = c("measurement"), relationship = "many-to-many")

  # add injection info
  xf_raw_pr <- dplyr::left_join(xf_raw_pr, xf_inj, by = "measurement")

  #add plate_id to df
  xf_raw_pr$plate_id <- xf_assayinfo$plate_id

  #add norm_info
  xf_raw_pr <- xf_raw_pr %>% dplyr::left_join(xf_norm, by = c("well"))

  #add bufferfactor
  xf_raw_pr <- xf_raw_pr %>% dplyr::left_join(xf_buffer, by = c("well"))

  #add flag well columnn
  xf_raw_pr$flagged_well <- FALSE
  xf_raw_pr$flagged_well[xf_raw_pr$well %in% xf_flagged] <- TRUE

  # select columns that are needed
  xf_raw_pr <- xf_raw_pr %>% dplyr::select(
    plate_id, well, measurement, tick, timescale, minutes, group, interval, injection,
    O2_em_corr, pH_em_corr, O2_mmHg, pH, pH_em_corr_corr, O2_em_corr_bkg,
    pH_em_corr_bkg, O2_mmHg_bkg, pH_bkgd, pH_em_corr_corr_bkg, bufferfactor, cell_n, flagged_well
  )

  return(xf_raw_pr)
  
}

preprocess_xf_rate <- function(xf_rate,
                               xf_norm,
                               xf_flagged){
  #add norm_info to rate data
  OCR_from_excel <- xf_rate %>% dplyr::left_join(xf_norm, by = c("well"))

  OCR_from_excel$flagged_well <- FALSE
  OCR_from_excel$flagged_well[OCR_from_excel$well %in% xf_flagged] <- TRUE

  return(OCR_from_excel)
}

rename_columns <- function(xf_raw_pr) {

  # change column names into terms without spaces
  colnames(xf_raw_pr) <- c(
    "measurement", "tick", "well", "group",
    "time", "temp_well", "temp_env", "O2_isvalid", "O2_mmHg",
    "O2_light", "O2_dark", "O2ref_light", "O2ref_dark",
    "O2_em_corr", "pH_isvalid", "pH", "pH_light", "pH_dark",
    "pHref_light",
    "pHref_dark", "pH_em_corr", "interval"
  )

  return(xf_raw_pr)
}

convert_timestamp <- function(xf_raw_pr) {

  # first make sure that the data is sorted correctly
  xf_raw_pr <- dplyr::arrange(xf_raw_pr, tick, well)

  # add three columns to df (totalMinutes, minutes and time) by converting the timestamp into seconds
  xf_raw_pr$time <- as.character((xf_raw_pr$time))
  times <- strsplit(xf_raw_pr$time, ":")
  xf_raw_pr$totalMinutes <- sapply(times, function(x) {
    x <- as.numeric(x)
    x[1] * 60 + x[2] + x[3] / 60
  })
  xf_raw_pr$minutes <- xf_raw_pr$totalMinutes - xf_raw_pr$totalMinutes[1] # first row needs to be first timepoint!
  xf_raw_pr$timescale <- round(xf_raw_pr$minutes * 60)

  return(xf_raw_pr)
}

correct_pH_em_corr <- function(pH_em_corr, pH_cal_em, pH_targetEmission){

  correct_pH_em_corr <- (pH_targetEmission / pH_cal_em) * pH_em_corr

}

calc_background <- function(xf_raw_pr){

  background <- xf_raw_pr %>%
    dplyr::select(group, well, measurement, timescale, O2_em_corr,
           pH_em_corr, O2_mmHg, pH, pH_em_corr_corr) %>%
    dplyr::filter(group == "Background") %>%
    dplyr::reframe(
      measurement,
      O2_em_corr_bkg = mean(O2_em_corr),
      pH_em_corr_bkg = mean(pH_em_corr),
      O2_mmHg_bkg = mean(O2_mmHg),
      pH_bkgd = mean(pH),
      pH_em_corr_corr_bkg = mean(pH_em_corr_corr)
    )

  return(background)
}

print("preprocess_xfplate is ready")


```


### run_seahtrue()


``` {webr-r}


run_seahtrue <- function(filepath_seahorse){
  
  filepath_seahorse %>% 
    read_xfplate() %>%
      preprocess_xfplate()
  
}

print("run_seahtrue is ready")


```


## run it

For one file

``` {webr-r}

library(tidyverse)

webr::install("logger")
library(logger)

#set file source
root_srcfile <- 
  "https://raw.githubusercontent.com/vcjdeboer/"
repository_srcfile <-
  "seahtrue/main/inst/extdata/"
name_srcfile <- "20191219 SciRep PBMCs donor A.xlsx"
output_srcfile <- "VB.xlsx"

#download file and rename to "VB.xlsx"
download.file(
  paste0(
    root_srcfile,
    repository_srcfile,
    name_srcfile), 
  output_srcfile)


XF <-run_seahtrue("VB.xlsx") 

XF


```

For three files

``` {webr-r}

library(tidyverse)

webr::install("logger")
library(logger)

#set file source
root_srcfile <- 
  "https://raw.githubusercontent.com/vcjdeboer/"
repository_srcfile <-
  "seahtrue/renv-sync_issue_2/inst/extdata/"

#file 1
name_srcfile <- "20191219 SciRep PBMCs donor A.xlsx"
output_srcfile <- "20191219 SciRep PBMCs donor A.xlsx"

#download file 1
download.file(
  paste0(
    root_srcfile,
    repository_srcfile,
    name_srcfile), 
  output_srcfile)

# file 2
name_srcfile <- "20200110 SciRep PBMCs donor B.xlsx"
output_srcfile <- "20200110 SciRep PBMCs donor B.xlsx"

#download file 2
download.file(
  paste0(
    root_srcfile,
    repository_srcfile,
    name_srcfile), 
  output_srcfile)

# file 3
name_srcfile <- "20200110 SciRep PBMCs donor C.xlsx"
output_srcfile <- "20200110 SciRep PBMCs donor C.xlsx"

#download file 3
download.file(
  paste0(
    root_srcfile,
    repository_srcfile,
    name_srcfile), 
  output_srcfile)

file_list <- c("20191219 SciRep PBMCs donor A.xlsx",
               "20200110 SciRep PBMCs donor B.xlsx",
               "20200110 SciRep PBMCs donor C.xlsx"
               )




```

Here we use the nice `map` function from `purrr` that we introduced previously:

``` {webr-r}

xf_3_read <- file_list %>% 
  map_dfr(~run_seahtrue(.x))

xf_3_read

```

... and we plot the time vs O2 for the raw data for the second experiment

``` {webr-r}


xf_3_read %>%
  filter(str_detect(plate_id, "V01941")) %>% 
  select(plate_id, raw_data)%>%
  unnest(c(raw_data)) %>%
  ungroup()%>%
  select(well, minutes, group, O2_mmHg) %>%
  filter(group == "100.000") %>%
  ggplot(aes(x = minutes, y = O2_mmHg, 
             group = well)) +
    geom_point() +
    theme_bw(base_size = 15)+
    facet_wrap(~well)

```

## Bioenergetic space plot

For making the bioenergetic space plots that were proposed in the Mookerjee et al. JBC [Quantifying intracellular rates of glycolytic and oxidative ATP production and consumption using extracellular flux measurements](https://www.sciencedirect.com/science/article/pii/S0021925820429084), we need to do four things:

-   Establish buffering power of the culture medium
-   Correct ECAR for OCR-derived acidification
-   Get the ATP assumptions and formulas into R
-   Plot the ATP fluxes in a space plot and derive the indices

The first needs to be done in the lab using established protocols for calculating buffering power, preferably with H2SO4 as acid. The second to fourth are merely some data analysis and plotting in R.

### Buffering power

We assume you allready know what the buffering power is of your particular culture medium and assigned that to the meta info of your experiment before running your seahorse plate. In that case it is listed in the `bufferfactor` column in our `raw_data` output data. Since each well can theoretically have a different type of culturing medium and thus also a different buffering factor, each well gets its own buffer factor

Let's have a look at the buffering power numbers in the `xf_3_read` data.

``` {webr-r}

xf_3_read %>%
  filter(str_detect(plate_id, "V01941")) %>% 
  select(plate_id, raw_data )%>%
  unnest(c(raw_data)) %>%
  pull(bufferfactor) %>%
  unique()


```

You will see that if there is `0 `and `2.4`. Likely, the background wells were assigned zero and the sample wells 2.4.

``` {webr-r}

xf_3_read %>%
  filter(str_detect(plate_id, "V01941")) %>% 
  select(plate_id, raw_data )%>%
  unnest(c(raw_data)) %>%
  select(well, bufferfactor) %>%
  unique() %>% 
  head(12) #or tail(12)


```

That is indeed the case, as you can see if you run the above code.

### Calculations

#### OCR-derived ECAR
We can calculate the contribution of OCR-derived H+ in multiple ways. Agilent takes an emprical approach and in the Mookerjee paper it is based on enzyme knetics and steady-state assumptions. For the agilent approach the contribution was empiraclly determined as `0.61` which was named the CCF (C02 contribution factor). For the mookerjee method the factor was `0.953`.

#### ATP per O2
For the agilent approach they take the P/O ratio as `2.75`, which was assumes and empirically tested. For the mookerjee approach, the P/O ratio was assumed to be `2.611`, also with a hyperpolarization factor included.

#### ATP per lactate
Agilent assumed the ATP/lactate ratio is `1`. Although Mookerjee is doing the same, they also take into account that for each each lactate derived from glucose there can be O2 consumption that produced ATP, this is a factor of `0.242`.

#### Combined
Since these are just transformations of our OCR and ECAR data, we can combine all these factors into three separate factors:

-   Jglyco_ecar_factor
-   Jglyco_ocr_factor
-   Joxphos_ocr_factor

We will also include a scaling factor for data that is not normalized to protein level or cell number. This scalling factor brings the data into the same range as the Mookerjee paper. The estimation of protein concentration in a seahorse well is 10-30 ug per 100000 cells. We thus take 20 ug as an estimate of protein amount in a well.

#### Code

Here is a function for calculating and a pipe for plotting the space. The first is `calculate_space`, it takes in the following arguments:

-   rate => `rate_data` format
-   param_set_ocr => timepoints for phases ocr
-   param_set_ecar => timepoints for phases ecar 
-   atp_factors => atp calculation factors
-   ug_protein_scaling_factor => scaling factor
-   OCR_var => either OCR_wave_bc or J_oxpos
-   ECAR_var => either ECAR_wave_bc or J_glyco


``` {webr-r}

calculate_space <- function(rate,
                            param_set_ocr, param_set_ecar,
                            atp_factors,
                            ug_protein_scaling_factor,
                            OCR_var, ECAR_var){

  SFI <- function(x, y, max_ecar, max_ocr){

    x_0 <- x + y - max_ocr
    y_0 <- x + y - max_ecar
    if(x_0 < 0){x_0 <- 0}
    if(y_0 < 0){y_0 <- 0}
    angle_ocr <- atan(max_ocr/x_0)*(180/pi)
    angle_ecar <- atan(y_0/max_ecar)*(180/pi)
    SFI <- ((angle_ocr - angle_ecar)/90) *100 #angle relative to 90 degrees

    return(SFI)

  }

  rate <- rate %>%
    mutate(J_glyco = (ECAR_wave_bc * atp_factors$Jglyco_ecar_factor -
                        OCR_wave_bc * atp_factors$Jglyco_ocr_factor)/ug_protein_scaling_factor,
           J_oxphos = (OCR_wave_bc * atp_factors$Joxphos_ocr_factor)/ug_protein_scaling_factor)

  df_ocr <- rate %>%
    select(my_OCR = all_of(OCR_var), everything()) %>%
    summarize(OCR = mean(my_OCR), # this was OCR_wave_bc
              .by = c(group, measurement)) %>%
    pivot_wider(names_from = measurement, names_prefix = "m", values_from = OCR) %>%
    rename(all_of(param_set_ocr)) %>%
    select(group, init_ocr, om_ocr, fccp_ocr, amrot_ocr) %>%
    mutate(non_mito_ocr = amrot_ocr,
           basal_ocr = init_ocr - non_mito_ocr,
           max_ocr = fccp_ocr - amrot_ocr,
           spare_ocr = max_ocr - basal_ocr,
           spare_ocr_index = spare_ocr / max_ocr,
           max_ocr_index = max_ocr/basal_ocr,
           atp_linked = init_ocr-om_ocr,
           proton_leak = om_ocr - amrot_ocr,
           leak_index = proton_leak / basal_ocr,
           coupling_index = atp_linked / basal_ocr)

  df_ecar <- rate %>%
    select(my_ECAR = all_of(ECAR_var), everything() ) %>%
    summarize(ECAR = mean(my_ECAR),
              .by = c(group, measurement)) %>%
    pivot_wider(names_from = measurement, names_prefix = "m", values_from = ECAR) %>%
    rename(all_of(param_set_ecar))  %>%
    select(group, init_ecar, om_ecar, fccp_ecar, amrot_ecar) %>%
    mutate(basal_ecar = init_ecar,
           max_ecar = om_ecar,
           spare_ecar = max_ecar-basal_ecar,
           spare_ecar_index = spare_ecar/max_ecar,
           max_ecar_index = max_ecar/basal_ecar)

  df_space <- df_ocr %>%
    left_join(df_ecar, by = c("group")) %>%
    ungroup() %>%
    mutate(bioenergetic_scope = max_ecar+max_ocr, #or max*max
           glyco_index = (basal_ecar/bioenergetic_scope)*100,
           bio_index = ((basal_ecar+basal_ocr)/(max_ecar+ max_ocr))*100, #or basal*basal/max*max
           glyco_index_max = (max_ecar/bioenergetic_scope)*100,
           supply_index = pmap_dbl(list(basal_ecar, basal_ocr, max_ecar, max_ocr), SFI))

  return(df_space)
}

print("calculate_space is ready")

```

### Space plot

We set the arguments first for plotting the biospace

``` {webr-r}

#mito stress test params
param_set_ocr <- c(init_ocr = "m2",
                   om_ocr = "m3",
                   fccp_ocr = "m4",
                   amrot_ocr = "m9")

param_set_ecar <- c(init_ecar = "m2",
                    om_ecar = "m3",
                    fccp_ecar = "m4",
                    amrot_ecar = "m9")

#brand/mookerjee factors
mookerjee_atp_factors <- list(Jglyco_ecar_factor = 7.23,
                           Jglyco_ocr_factor = 0.469,
                           Joxphos_ocr_factor = 4.6988)

#agilent factors
agilent_atp_factors <- list(Jglyco_ecar_factor = 8.7552,
                         Jglyco_ocr_factor = 0.61,
                         Joxphos_ocr_factor = 5.5)


#for scale comparison to mookerjee JBC (0 - 70 pmol ATP/min/ug)
#estimation of protein concentration in well 10-30 ug per 100000 cells
#20 ug in well approximately
ug_protein_scaling_factor = 20

#either J or wave_bc
ECAR_var <- c("J_glyco")
OCR_var <- c("J_oxphos")

#axis titles for plot
ECAR_title <- c("J ATP glyco (pmol ATP/min/ug protein)")
OCR_title <- c("J ATP mito (pmol ATP/min/ug protein)")

#plot title
plot_title <- "Space plot (mookerjee params)"
plot_title <- "Space plot (agilent params)"

legend_title <- "Group"

##for plotting the raw ECAR/OCR wihout Jatp conversions:
# ECAR_var <- c("ECAR_wave_bc")
# OCR_var <- c("OCR_wave_bc")
#
# ECAR_title <- c("ECAR (mpH/min)")
# OCR_title <- c("OCR (pmol/min)")
#
# ug_protein_scaling_factor = 1

# a theme layout setting
webr::install("MetBrewer")
my_cols_two <- 
  MetBrewer::met.brewer(name = "Hiroshige", n = 2)

print("arguments are set")

```

Next we set the input rate table argument

``` {webr-r}


rate <- xf_3_read %>%
  filter(str_detect(plate_id, "V01941")) %>% 
  select(plate_id, rate_data )%>%
  unnest(c(rate_data)) %>%
  ungroup()

print("rate is set")


```

Run the space function

``` {webr-r}

df_space <- calculate_space(
                rate %>%
                  filter(str_detect(group, 
                                    "100.000|200.000")),
                param_set_ocr, param_set_ecar,
                agilent_atp_factors,
                ug_protein_scaling_factor,
                OCR_var, ECAR_var
                            )

print("df_space is ready")

```

Plot the `df_space`

``` {webr-r}


#for two groups only (because of #colors)
df_space %>%
  mutate(max_axis = 
    case_when(
      fccp_ocr>=amrot_ecar ~ fccp_ocr+fccp_ocr*0.1,
      fccp_ocr<amrot_ecar ~ amrot_ecar+amrot_ecar*0.1)) %T>%
  {my_max <<- max(.$max_axis)} %>%
  arrange(desc(group)) %>%
  select(group,basal_ocr,fccp_ocr, 
         basal_ecar, amrot_ecar) %>%
  ggplot(aes(xmin = 0, ymin = 0, 
             ymax = fccp_ocr, xmax = amrot_ecar,
             fill = forcats::fct_rev(group)))+
  geom_rect(alpha = 0.5, color ="black")+
  geom_segment(aes(x=0, xend=amrot_ecar, 
                   y=0, yend=fccp_ocr),
               color="grey10", linetype = "dashed")+
  geom_point(aes(x = basal_ecar, y = basal_ocr, 
                 fill = group), 
             color = "black", pch = 21, size = 4)+
  scale_colour_manual(values = my_cols_two) +
  scale_fill_manual(
    values = my_cols_two %>% colorspace::lighten(.2),
    name = legend_title)+
  labs(title = plot_title,
       x = ECAR_title,
       y = OCR_title)+
  #coord_fixed(ratio = 1,
  #            xlim = c(0,my_max), ylim = c(0,my_max),
  #            expand = FALSE, clip = "on")+
  theme_classic()


```


### Gauge plots

``` {webr-r}

plot_multi_space_gauge <- function(df_space,
                                   my_param_to_plot,
                                   my_colors,
                                   my_gauge_title,
                                   my_gauge_subtitle,
                                   my_label_text_lo,
                                   my_label_text_hi){

  my_param_df <- df_space %>%
    select(param = all_of(my_param_to_plot),
           group) %>%
    mutate_if(is.numeric, round)


  number_of_plots <- nrow(my_param_df)

  plot_list <- list()
  for (i in 1:number_of_plots){

    my_param_value <- my_param_df %>%  pluck("param", i)
    my_axis_title <- my_param_df %>%  pluck("group", i)

    plot_list[[i]] <- plot_one_space_gauge(my_param_value,
                         my_colors,
                         my_axis_title,
                         my_label_text_lo,
                         my_label_text_hi)


  }

  multi_plot <- patchwork::wrap_plots(plot_list) +
    plot_annotation(
      title = my_gauge_title,
      subtitle = my_gauge_subtitle
      #caption = ""
  ) &   theme(text = element_text(size = 25),
              axis.title.x = element_text(size = 20))

  return(multi_plot)
}

plot_one_space_gauge <- function(my_param,
                                 my_colors,
                                 my_axis_title,
                                 my_label_text_lo,
                                 my_label_text_hi){



  breaks <- c(0, my_param, 100)

  #gauge chart from 
  #https://stackoverflow.com/questions/24900903/how-to-draw-gauge-chart-in-r
  get_poly <- function(a,b,r1=0.5,r2=1.0) {
    th.start <- pi*(1-a/100)
    th.end   <- pi*(1-b/100)
    th       <- seq(th.start,th.end,length=100)
    x        <- c(r1*cos(th),rev(r2*cos(th)))
    y        <- c(r1*sin(th),rev(r2*sin(th)))
    return(data.frame(x,y))
  }



  plot <- ggplot() +
    geomtextpath::geom_textcurve(
      data = data.frame(x = -1, xend =  0, y = 0, yend = 1),
      aes(x, y, xend = xend, yend = yend),
          hjust = 0.2,
          curvature = -0.4,
          label = my_label_text_lo,
          size = 6,
          vjust = -1,
          color = my_colors[1])+
    geomtextpath::geom_textcurve(
      data = data.frame(x = 0, xend =  1, y = 1, yend = 0),
      aes(x, y, xend = xend, yend = yend),
      hjust = 0.8,
      curvature = -0.4,
      angle = 90,
      label = my_label_text_hi,
      size = 6,
      vjust = -1,
      color = my_colors[2]
    )+
    geom_polygon(data=get_poly(breaks[1],
                               breaks[2]),
                 aes(x,y),fill= my_colors[1])+
    geom_polygon(data=get_poly(breaks[2],
                               breaks[3]),
                 aes(x,y),fill= my_colors[2])+
    geom_polygon(data=get_poly(my_param-0.2, 
                               my_param+0.2,
                               r1 = 0.5,
                               r2 = 1.1),
                 aes(x,y))+
    geom_text(data=as.data.frame(breaks), 
              size= 6 , vjust=0,
              aes(x=1.1*cos(pi*(1-breaks/100)),
                  y=1.125*sin(pi*(1-breaks/100)),
                  label=paste0(breaks,"%")))+
    labs(#title = my_gauge_title,
      x = my_axis_title )+
    #coord_fixed()+
    coord_fixed(ratio = 1,
                xlim = c(-1.2,1.2), ylim = c(0,1.2),
                expand = TRUE, clip = "on")+
    theme_void()+
    theme(plot.title = element_text(size = rel(0.2), 
                                    hjust = 0, vjust = -1),
          axis.title.x = element_text(size = rel(0.2), 
                                      vjust = 1)
    )

  return(plot)

}

print("multi_gauge functions are ready")


```

``` {webr-r}

webr::install("geomtextpath")
webr::install("patchwork")
library(patchwork)

hiroshige_cols_four <- c("#ef8a47", "#ffd06f", 
                         "#72bcd5", "#376795")
my_doughnut_cols_lightblue <- c(hiroshige_cols_four[3], 
                                "#D1D3D4")
my_colors <- my_doughnut_cols_lightblue
my_param_to_plot <- "supply_index"
my_gauge_title <- "Supply index"
my_gauge_subtitle <- "Describes the flexibility in switching between glyco and mito."
my_label_text_lo <- "lo"
my_label_text_hi <- "hi"

plot_multi_space_gauge(df_space %>%
                         slice(1:4),
                       my_param_to_plot,
                       my_colors,
                       my_gauge_title,
                       my_gauge_subtitle,
                       my_label_text_lo,
                       my_label_text_hi)



```


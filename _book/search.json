[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The book of seahtrue",
    "section": "",
    "text": "Preface\nThis is the R Seahorse data analysis manual using functions from the Seahtrue package. Its purpose is to demonstrate and educate how to use R for Extracellular Flux analysis. A dedicated data analysis pipeline is used that allows for quality control and advanced plotting of the data.\nThe manual is designed using a webr/wasm format, so that you can run R in your browser and do not need to install any R or Rstudio software on your computer.\n\n\n\n\n\n\nNote\n\n\n\nThe manual is targeted to all levels of learning, meaning that also interested learners without any R background or programming knowledge can use this manual\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo turn your .asyr Seahorse Wave file into an excel .xlsx file, you can use the Seahorse Wave desktop software or the Seahorse analytics website from Agilent:\nhttps://seahorseanalytics.agilent.com\nLots of info regarding Seahorse analysis including how it works and how to run experiments is available from the Agilent website\nAll things lab - How to run an assay:\nhttps://www.agilent.com/en/product/cell-analysis/how-to-run-an-assay\nAll other Agilent Seahorse info:\nhttps://www.agilent.com/en/products/cell-analysis/how-seahorse-xf-analyzers-work"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "ocean.html#title-of-chapter",
    "href": "ocean.html#title-of-chapter",
    "title": "Ocean",
    "section": "Title of chapter",
    "text": "Title of chapter\nLoading\n  webR..."
  },
  {
    "objectID": "ocean.html#plotting-data",
    "href": "ocean.html#plotting-data",
    "title": "Ocean",
    "section": "Plotting data",
    "text": "Plotting data\nFirst, let’s make a simple scatter plot. We use a famous dataset that is used in R a lot for educational puposes. This is the mtcars dataset (mtcars = “Motor Trend Car Road Tests”). See https://rstudio-pubs-static.s3.amazonaws.com/61800_faea93548c6b49cc91cd0c5ef5059894.html and https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars for info about the mtcars dataset. We can always call this dataset when using R, it is one of many datasets available from base R or tidyverse packages.\nFirst, we will inspect the dataset. For this we will load the tidyverse:\nLoading\n  webR...\n\n\n  \n\n\nOnce tidyverse is loaded via the library call, it is loaded in your current session in your browser, so you do not have to load it each time. Next have a look at the full dataset.\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nThe pipe %>% operator\n\n\n\nThe %>% operator is a huge component of the tidy way of working. In R we now also have a “native” pipe that we can also use. This is the |> operator.\nLoading\n  webR...\n\n\n  \n\n\n\n\nLet’s select a small part of the data using select from the dplyr package:\nLoading\n  webR...\n\n\n  \n\n\nNext, make a simple plot with the miles per gallon (mpg) and dispension parameters (disp) in the mtcars dataset.\nLoading\n  webR...\n\n\n  \n\n\nThis is a very basic plot, without much formatting. Let’s make it prettier!\nAdd color and bring in a third parameter:\nLoading\n  webR...\n\n\n  \n\n\nHere we need to have a look at data-types. The cyl parameters is a numerical parameter. GGplot automatically assumes we want a continous scale for this. Instead the cyl is more of a categorical data type there are either 4, 6 or 8 cylinders in each car so we can make the cyl parameter categorical like this:\nLoading\n  webR...\n\n\n  \n\n\nIf you want to have different color you can use one of the many color pallettes that are available:\nLoading\n  webR...\n\n\n  \n\n\nApart from color you can change the shape of the datapoints:\nLoading\n  webR...\n\n\n  \n\n\nGGplot can use different themes for your plots and there are many many options to tweak your plots to the way you like\nLet’s change titles:\nLoading\n  webR...\n\n\n  \n\n\nChange the plotting theme and base size of the elements:\nLoading\n  webR...\n\n\n  \n\n\nChange the scaling of the axes. It is good practice to plot graphs from zero:\nLoading\n  webR...\n\n\n  \n\n\nNow the datapoints at the maxima of the axis are not completely visible so it would be nice that we have some more space:\nLoading\n  webR...\n\n\n  \n\n\nNow we have generated a nice visualisation of our data using ggplot. Please note that ggplot uses layers and we added each time a different layer of information to the ggplot. If you want you can go wild with ggplot. Please find a nice overview of visualisations using ggplot, tidy and R from Cedric Scherer https://www.cedricscherer.com/2019/12/30/best-tidytuesday-2019/. Also the underlying R code is available for those plots."
  },
  {
    "objectID": "ocean.html#fixing-common-errors",
    "href": "ocean.html#fixing-common-errors",
    "title": "Jump into the water",
    "section": "Fixing common errors",
    "text": "Fixing common errors\nBelow is some code that is not working properly, because of coding sematics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%."
  },
  {
    "objectID": "ocean.html",
    "href": "ocean.html",
    "title": "Jump into the water",
    "section": "",
    "text": "Ditching point-and-click and diving into R\nIn the section chapter, we jump into the water. We learn how to swim in R code and get ourselves familiar with using R for data handling and plotting. We will use first a dataset from R itself and secondly work with a Seahorse data file. There are exercises, with solutions, as well.\nFirst, let’s make a simple scatter plot. We use a famous dataset that is used in R a lot for educational puposes. This is the mtcars dataset (mtcars = “Motor Trend Car Road Tests”). See parameter overview and documentation for info about the mtcars dataset. We can always call this dataset when using R, it is one of many datasets available from base R or tidyverse packages.\nFirst, we will inspect the dataset. For this we will load the tidyverse:\nOnce tidyverse is loaded via the library call, it is loaded in your current session in your browser, so you do not have to load it each time. Next have a look at the full dataset.\nor\nor\nor\nLet’s select a small part of the data using select from the dplyr package:\nNext, make a simple plot with the miles per gallon (mpg) and dispension parameters (disp) in the mtcars dataset.\nThis is a very basic plot, without much formatting. Let’s make it prettier!\nAdd color and bring in a third parameter:\nHere we need to have a look at data-types. The cyl parameters is a numerical parameter. GGplot automatically assumes we want a continous scale for this. Instead the cyl is more of a categorical data type there are either 4, 6 or 8 cylinders in each car so we can make the cyl parameter categorical like this:\nIf you want to have different color you can use one of the many color pallettes that are available:\nApart from color you can change the shape of the datapoints:\nGGplot can use different themes for your plots and there are many many options to tweak your plots to the way you like\nLet’s change titles:\nChange the plotting theme and base size of the elements:\nChange the scaling of the axes. It is good practice to plot graphs from zero:\nNow the datapoints at the maxima of the axis are not completely visible so it would be nice that we have some more space:\nNow we have generated a nice visualisation of our data using ggplot. Please note that ggplot uses layers and we added each time a different layer of information to the ggplot. If you want you can go wild with ggplot. Please find a nice overview of visualisations using ggplot, tidy and R from Cedric Scherer https://www.cedricscherer.com/2019/12/30/best-tidytuesday-2019/. Also the underlying R code is available for those plots.\nNow, lets plot some Seahorse data. For this we need to import some here into this session. We use a dataset that was we published in Scientific Reports https://www.nature.com/articles/s41598-021-81217-4. It is data from PBMCs where we followed OCR and ECAR using Extracellular Flux analysis with the XFe96 over time and during that time we injected after three measurement phases FCCP and after six measurement phases we injected Antimycin/Rotenone (AM/Rot). The data is available from github .\nAs you can see from the glimpse, the data table that we have now (we call it a tibble in tidy lanuguage), contains 7 columns; Measurement, Well, Group, Time, OCR, ECAR, PER. The data is allready nice and tidyly organized in the Rate sheet of the excel file that we have loaded. The file was generated in the Wave Agilent software and directly comes from exporting the Seahorse data to xlsx.\nI prefer to use lower case column names without any spaces, so for these column names we have to turn them into lower case first. We use some easy functions from the janitor package for this.\nNext, we can start plotting data using ggplot. Let’s introduce the filter command from dplyr. Whereas select is there to select columns, filter is there to select rows. So let’s filter the rows for the group with is labeled “200.000” (200.000 cells/per well) and the “Background” group.\nNow that we know how to filter we can use the filtered data to make the ggplot.\nThat plot is not so informative. Let’s make it prettier. First, add lines:\nNext, change colors:\nChange theme and text size:\nAdd titles:\nThis is a very nice plot. It shows all OCR curve for each well for the 200.000 and the background groups. The information that is now not in the plot is which line matches to which well.\nExercise We can color each line (but there are too many wells so it will not be nice!). * Change this in the above code color = well instead of color = group. * You will notice that the there are not enough colors in the brewer palette Set1, so you go back to the default coloring by deleting the scale_color_brewer line as well. Use th # to comment out the line. * Now notice that the legend is huge and not completely visible, againg indicating that this is not the way to go\nInstead, we can try to label the lines. The ggrepel package is not yet available in webr, so for now we have to use the geom_text or annotate commands from ggplot. The benefit of ggrepel is that it automatically prevents text overlap.\nAlthough we now labeled lines that are at the minimum and maximum OCR, this is only usefull for this one plot in these conditions. The position of the label is tweaked based on this specific plot, making this not such a quick solution to our problem.\nWe can also try to use the ggiraph package. This brings in some nice interactivity into the plot. Since we are now working with the plot in a browser, this can be very handy. Also if we want to publish the plot as html and not a plain PDF this can be usefull. ggiraph is unfortunately also not available for wasm/webr since one dependent package is not available uuid, and I also can’t get it to run via quarto….."
  },
  {
    "objectID": "ocean.html#exercises",
    "href": "ocean.html#exercises",
    "title": "Jump into the water",
    "section": "Exercises",
    "text": "Exercises\n\nAdding layers and changing the MTCARS plot\n\n\n\n\n\n\nExercise 1\n\n\n\nGive the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the alpha argument it should be a number from 0 to 1.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 1\n\n\n\n\n\nPlease note that the alpha we added is not part of an aesthetics (aes), meaning that the value of the alpha is not linked with a parameter in our data.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nAdd a layer that will generate a smooth linear regression line that shows the relation between mpg and disp. Use the stat_smooth command for this.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 2\n\n\n\n\n\nPlease make sure that the ggplot is not separates into groups, if the data is grouped by color or shape the regression line for each group will be generated.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nUse the facet_wrap command to make three separate plots for each cylinder.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\nFixing common errors\nBelow is some code that is not working properly, because of coding semantics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%.\n\n\n\n\n\n\n\n\n\nFix error 4\n\n\n\nThis is an error that is not apparent from an error message that R generates for you. However, the code does not give you what you want. The plot should show the cyl parameter in different shapes, just like there are three different colors for each level of the cyl parameter.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 4\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nThe shape argument should be included in the aesthetics (aes) part of the ggplot"
  },
  {
    "objectID": "ocean.html#adding-layers-and-changing-the-cool-mtcars-plot",
    "href": "ocean.html#adding-layers-and-changing-the-cool-mtcars-plot",
    "title": "Jump into the water",
    "section": "Adding layers and changing the cool MTCARS plot",
    "text": "Adding layers and changing the cool MTCARS plot\n\n\n\n\n\n\nExercise 1\n\n\n\nGive the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the alpha argument it should be a number from 0 to 1.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 1\n\n\n\n\n\nPlease note that the alpha we added is not part of an aesthetics (aes), meaning that the value of the alpha is not linked with a parameter in our data.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\nFixing common errors\nBelow is some code that is not working properly, because of coding sematics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%."
  },
  {
    "objectID": "pond.html",
    "href": "pond.html",
    "title": "1  Ditching point-and-click and diving into R",
    "section": "",
    "text": "Data analysis in biological and medical sciences was (and still is) dominated by the use of point-and-click tools, like Excel, Prism, SPSS etc. The reasons for this are that it is easy, it is visual, and gets you fast to an outcome. These point-and-click tools are convenient to use and their main asset is that you have a canvas or grid in front of you for dragging-dropping, copy-pasting, typing and calculating. For plotting data, you can choose formatting options by clicking on the features you want to change, again on a canvas that is in front of you on the screen. This canvas style of working is likely what is closest to our natural way of getting things done; putting stuff together with your hands and seeing directly what happens to the stuff is quick and actionable.\nThe disadvantages of using point-and-click tools in biological and medical sciences are that point-and-click tools are not traceable and can be prone to mistakes. The sequence of clicks and manipulations that have been made to the data was not recorded, which makes the data wrangling process not traceable and proper version control does not exist. Also, you will always works within the limits of the tools that you are using, or how Bruno Rodrigues, the author of the free book Building reproducible analytical pipelines with R, phrased it “… point and click never allow you to go beyond what vendors think you need.” X-link.\nEnter R! R is possibly the best, easiest and most accessible tool to use for biologist and like-minded scientists. R is part of or adopted more and more in scholarly programs at academic institutes not only for statistical use but also for other aspects of data science. Other tools like Python and Matlab are also widely used and they have similar benefits as R over point-and-click tools. Matlab however is proprietary software that needs high licence fees from institutions to be able to work with it.\nHere you will jump straight to using the tidyverse way of working https://www.tidyverse.org/. A complete (but extensive) overview of R data science can be found at https://r4ds.hadley.nz/. The “R for data science” resource also centers around the tidyverse and the tidy concept of data handling. Often data handling (organizing the data and tidying it to be able to use it in your downstream workflow) is describes as data wrangling. As mentioned in the R for data science book: “Together, tidying and transforming are called wrangling because getting your data in a form that’s natural to work with often feels like a fight!” https://r4ds.hadley.nz/intro. With the tidyverse and some level of experience your fight will become less and less over time.\nSince the R community is huge, there is also an overwhelming number of resources (like books, tutorials, videos, blog posts, stack-exchange content) that all want to teach, educate and inform you about R in one way or the other. Also, there are again collections of R resources, and even collections of collections of R resources….\nThese tutorials and courses have one thing in common, they start of with installing R and Rstudio and learning the software. How nice would it be if we can skip these (often) nasty installations? What if we can skip version updating and package installations and start working with your data right away? That would be amazing! And this is possible with the development of webr by George Stagg and colleagues https://github.com/r-wasm/webr.\n\nIt is R in the browser!\n\nThis is so great, because it provides the most convenient, quick and easy way to enter the R world. It is just like you having your Excel, Word and Powerpoint always immediately up and running by a click of a button. Since with R we type in our commands instead of pointing and clicking we are in the era of type-and-click to get your data science done.\nThis book is completely written using quarto and webr and allows you to typ in the code and run it right in the browser."
  },
  {
    "objectID": "pond_intro.html",
    "href": "pond_intro.html",
    "title": "2  Plotting cars data",
    "section": "",
    "text": "3 chpat\nFirst, let’s make a simple scatter plot. We use a famous dataset that is used in R a lot for educational puposes. This is the mtcars dataset (mtcars = “Motor Trend Car Road Tests”). See parameter overview and documentation for info about the mtcars dataset. We can always call this dataset when using R, it is one of many datasets available from base R or tidyverse packages.\nFirst, we will inspect the dataset. For this we will load the tidyverse:\nOnce tidyverse is loaded via the library call, it is loaded in your current session in your browser, so you do not have to load it each time. Next have a look at the full dataset.\nor\nor\nor\nLet’s select a small part of the data using select from the dplyr package:\nNext, make a simple plot with the miles per gallon (mpg) and dispension parameters (disp) in the mtcars dataset.\nThis is a very basic plot, without much formatting. Let’s make it prettier!\nAdd color and bring in a third parameter:\nHere we need to have a look at data-types. The cyl parameters is a numerical parameter. GGplot automatically assumes we want a continous scale for this. Instead the cyl is more of a categorical data type there are either 4, 6 or 8 cylinders in each car so we can make the cyl parameter categorical like this:\nIf you want to have different color you can use one of the many color pallettes that are available:\nApart from color you can change the shape of the datapoints:\nGGplot can use different themes for your plots and there are many many options to tweak your plots to the way you like\nLet’s change titles:\nChange the plotting theme and base size of the elements:\nChange the scaling of the axes. It is good practice to plot graphs from zero:\nNow the datapoints at the maxima of the axis are not completely visible so it would be nice that we have some more space:\nNow we have generated a nice visualisation of our data using ggplot. Please note that ggplot uses layers and we added each time a different layer of information to the ggplot. If you want you can go wild with ggplot. Please find a nice overview of visualisations using ggplot, tidy and R from Cedric Scherer https://www.cedricscherer.com/2019/12/30/best-tidytuesday-2019/. Also the underlying R code is available for those plots."
  },
  {
    "objectID": "pond_intro.html#exercises",
    "href": "pond_intro.html#exercises",
    "title": "2  Plotting cars data",
    "section": "2.1 Exercises",
    "text": "2.1 Exercises\n\n2.1.1 Adding layers and changing the MTCARS plot\n\n\n\n\n\n\nExercise 1\n\n\n\nGive the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the alpha argument it should be a number from 0 to 1.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 1\n\n\n\n\n\nPlease note that the alpha we added is not part of an aesthetics (aes), meaning that the value of the alpha is not linked with a parameter in our data.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nAdd a layer that will generate a smooth linear regression line that shows the relation between mpg and disp. Use the stat_smooth command for this.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 2\n\n\n\n\n\nPlease make sure that the ggplot is not separates into groups, if the data is grouped by color or shape the regression line for each group will be generated.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nUse the facet_wrap command to make three separate plots for each cylinder.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n2.1.2 Fixing common errors\nBelow is some code that is not working properly, because of coding semantics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%.\n\n\n\n\n\n\n\n\n\nFix error 4\n\n\n\nThis is an error that is not apparent from an error message that R generates for you. However, the code does not give you what you want. The plot should show the cyl parameter in different shapes, just like there are three different colors for each level of the cyl parameter.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 4\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nThe shape argument should be included in the aesthetics (aes) part of the ggplot"
  },
  {
    "objectID": "swim.html",
    "href": "swim.html",
    "title": "Jump into the water",
    "section": "",
    "text": "In the section chapter, we jump into the water. We learn how to swim in R code and get ourselves familiar with using R for data handling and plotting. We will use first a dataset from R itself and secondly work with a Seahorse data file. There are exercises, with solutions, as well."
  },
  {
    "objectID": "swim_intro.html#exercises",
    "href": "swim_intro.html#exercises",
    "title": "1  Plotting cars data",
    "section": "1.1 Exercises",
    "text": "1.1 Exercises\n\n1.1.1 Adding layers and changing the MTCARS plot\n\n\n\n\n\n\nExercise 1\n\n\n\nGive the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the alpha argument it should be a number from 0 to 1.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 1\n\n\n\n\n\nPlease note that the alpha we added is not part of an aesthetics (aes), meaning that the value of the alpha is not linked with a parameter in our data.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nAdd a layer that will generate a smooth linear regression line that shows the relation between mpg and disp. Use the stat_smooth command for this.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 2\n\n\n\n\n\nPlease make sure that the ggplot is not separates into groups, if the data is grouped by color or shape the regression line for each group will be generated.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nUse the facet_wrap command to make three separate plots for each cylinder.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n1.1.2 Fixing common errors\nBelow is some code that is not working properly, because of coding semantics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%.\n\n\n\n\n\n\n\n\n\nFix error 4\n\n\n\nThis is an error that is not apparent from an error message that R generates for you. However, the code does not give you what you want. The plot should show the cyl parameter in different shapes, just like there are three different colors for each level of the cyl parameter.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 4\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nThe shape argument should be included in the aesthetics (aes) part of the ggplot"
  },
  {
    "objectID": "swim_cars.html",
    "href": "swim_cars.html",
    "title": "2  Ditching point-and-click and diving into R",
    "section": "",
    "text": "Data analysis in biological and medical sciences was (and still is) dominated by the use of point-and-click tools, like Excel, Prism, SPSS etc. The reasons for this are that it is easy, it is visual, and gets you fast to an outcome. These point-and-click tools are convenient to use and their main asset is that you have a canvas or grid in front of you for dragging-dropping, copy-pasting, typing and calculating. For plotting data, you can choose formatting options by clicking on the features you want to change, again on a canvas that is in front of you on the screen. This canvas style of working is likely what is closest to our natural way of getting things done; putting stuff together with your hands and seeing directly what happens to the stuff is quick and actionable.\nThe disadvantages of using point-and-click tools in biological and medical sciences are that point-and-click tools are not traceable and can be prone to mistakes. The sequence of clicks and manipulations that have been made to the data was not recorded, which makes the data wrangling process not traceable and proper version control does not exist. Also, you will always works within the limits of the tools that you are using, or how Bruno Rodrigues, the author of the free book Building reproducible analytical pipelines with R, phrased it “… point and click never allow you to go beyond what vendors think you need.” X-link.\nEnter R! R is possibly the best, easiest and most accessible tool to use for biologist and like-minded scientists. R is part of or adopted more and more in scholarly programs at academic institutes not only for statistical use but also for other aspects of data science. Other tools like Python and Matlab are also widely used and they have similar benefits as R over point-and-click tools. Matlab however is proprietary software that needs high licence fees from institutions to be able to work with it.\nHere you will jump straight to using the tidyverse way of working https://www.tidyverse.org/. A complete (but extensive) overview of R data science can be found at https://r4ds.hadley.nz/. The “R for data science” resource also centers around the tidyverse and the tidy concept of data handling. Often data handling (organizing the data and tidying it to be able to use it in your downstream workflow) is describes as data wrangling. As mentioned in the R for data science book: “Together, tidying and transforming are called wrangling because getting your data in a form that’s natural to work with often feels like a fight!” https://r4ds.hadley.nz/intro. With the tidyverse and some level of experience your fight will become less and less over time.\nSince the R community is huge, there is also an overwhelming number of resources (like books, tutorials, videos, blog posts, stack-exchange content) that all want to teach, educate and inform you about R in one way or the other. Also, there are again collections of R resources, and even collections of collections of R resources….\nThese tutorials and courses have one thing in common, they start of with installing R and Rstudio and learning the software. How nice would it be if we can skip these (often) nasty installations? What if we can skip version updating and package installations and start working with your data right away? That would be amazing! And this is possible with the development of webr by George Stagg and colleagues https://github.com/r-wasm/webr.\n\nIt is R in the browser!\n\nThis is so great, because it provides the most convenient, quick and easy way to enter the R world. It is just like you having your Excel, Word and Powerpoint always immediately up and running by a click of a button. Since with R we type in our commands instead of pointing and clicking we are in the era of type-and-click to get your data science done.\nThis book is completely written using quarto and webr and allows you to typ in the code and run it right in the browser."
  },
  {
    "objectID": "swim_seahorse.html",
    "href": "swim_seahorse.html",
    "title": "3  Plotting seahorse",
    "section": "",
    "text": "Now, lets plot some Seahorse data. For this we need to import some here into this session. We use a dataset that was we published in Scientific Reports Janssen et al.. It is data from PBMCs where we followed OCR and ECAR using Extracellular Flux analysis with the XFe96 over time and during that time we injected after three measurement phases FCCP, and after six measurement phases we injected Antimycin/Rotenone (AM/Rot). The data is available from github.\nLoading\n  webR...\n\n\n  \n\n\nAs you can see from the glimpse, the data table that we have now (we call it a tibble in tidy lanuguage), contains 7 columns; Measurement, Well, Group, Time, OCR, ECAR, PER. The data is allready nice and tidyly organized in the Rate sheet of the excel file that we have loaded. The file was generated in the Wave Agilent software and directly comes from exporting the Seahorse data to xlsx.\nI prefer to use lower case column names without any spaces, so for these column names we have to turn them into lower case first. We use some easy functions from the janitor package for this.\nLoading\n  webR...\n\n\n  \n\n\nNext, we can start plotting data using ggplot. Let’s introduce the filter command from dplyr. Whereas select is there to select columns, filter is there to select rows. So let’s filter the rows for the group with is labeled “200.000” (200.000 cells/per well) and the “Background” group.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nThe filter command\n\n\n\n\n\nFiltering data is selecting the rows based on some arguments. You need some to understand some semnatics here. For filtering based on multiple conditions we use group %in% c(\"200.000\", \"Background\"), for filtering based on a single condition we can use group == \"200.000\". The %in% operator is used to match two items.\n\n1 %in% c(1,2,3,4,5) #is TRUE\n\n[1] TRUE\n\n\n\n# just like\n1 == 1 #is TRUE\n\n[1] TRUE\n\n\n\n#the reverse is also possible\nc(1,2,3,4,5) %in% 1\n\n[1]  TRUE FALSE FALSE FALSE FALSE\n\n#is TRUE FALSE FALSE FALSE FALSE FALSE\n\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\nThus the group %in% c(\"200.000\", \"Background\") statement in the filter function above tells which group items to use. For 200.000 there is match (TRUE), but for 100.000 there is not a match (it is FALSE).\n\n\n\nNow that we know how to filter we can use the filtered data to make the ggplot.\nLoading\n  webR...\n\n\n  \n\n\nThat plot is not so informative. Let’s make it prettier. First, add lines:\nLoading\n  webR...\n\n\n  \n\n\nNext, change colors:\nLoading\n  webR...\n\n\n  \n\n\nChange theme and text size:\nLoading\n  webR...\n\n\n  \n\n\nAdd titles:\nLoading\n  webR...\n\n\n  \n\n\nThis is a very nice plot. It shows all OCR curve for each well for the 200.000 and the background groups. The information that is now not in the plot is which line matches to which well.\nExercise We can color each line (but there are too many wells so it will not be nice!). * Change this in the above code color = well instead of color = group. * You will notice that the there are not enough colors in the brewer palette Set1, so you go back to the default coloring by deleting the scale_color_brewer line as well. Use th # to comment out the line. * Now notice that the legend is huge and not completely visible, againg indicating that this is not the way to go\nInstead, we can try to label the lines. The ggrepel package is not yet available in webr, so for now we have to use the geom_text or annotate commands from ggplot. The benefit of ggrepel is that it automatically prevents text overlap.\nLoading\n  webR...\n\n\n  \n\n\nAlthough we now labeled lines that are at the minimum and maximum OCR, this is only usefull for this one plot in these conditions. The position of the label is tweaked based on this specific plot, making this not such a quick solution to our problem.\nWe can also try to use the ggiraph package. This brings in some nice interactivity into the plot. Since we are now working with the plot in a browser, this can be very handy. Also if we want to publish the plot as html and not a plain PDF this can be usefull. ggiraph is unfortunately also not available for wasm/webr since one dependent package is not available uuid, and I also can’t get it to run via quarto….."
  },
  {
    "objectID": "swim_intro.html",
    "href": "swim_intro.html",
    "title": "1  Ditching point-and-click and diving into R",
    "section": "",
    "text": "Data analysis in biological and medical sciences was (and still is) dominated by the use of point-and-click tools, like Excel, Prism, SPSS etc. The reasons for this are that it is easy, it is visual, and gets you fast to an outcome. These point-and-click tools are convenient to use and their main asset is that you have a canvas or grid in front of you for dragging-dropping, copy-pasting, typing and calculating. For plotting data, you can choose formatting options by clicking on the features you want to change, again on a canvas that is in front of you on the screen. This canvas style of working is likely what is closest to our natural way of getting things done; putting stuff together with your hands and seeing directly what happens to the stuff is quick and actionable.\nThe disadvantages of using point-and-click tools in biological and medical sciences are that point-and-click tools are not traceable and can be prone to mistakes. The sequence of clicks and manipulations that have been made to the data was not recorded, which makes the data wrangling process not traceable and proper version control does not exist. Also, you will always works within the limits of the tools that you are using, or how Bruno Rodrigues, the author of the free book Building reproducible analytical pipelines with R, phrased it “… point and click never allow you to go beyond what vendors think you need.” X-link.\nEnter R! R is possibly the best, easiest and most accessible tool to use for biologist and like-minded scientists. R is part of or adopted more and more in scholarly programs at academic institutes not only for statistical use but also for other aspects of data science. Other tools like Python and Matlab are also widely used and they have similar benefits as R over point-and-click tools. Matlab however is proprietary software that needs high licence fees from institutions to be able to work with it.\nHere you will jump straight to using the tidyverse way of working https://www.tidyverse.org/. A complete (but extensive) overview of R data science can be found at https://r4ds.hadley.nz/. The “R for data science” resource also centers around the tidyverse and the tidy concept of data handling. Often data handling (organizing the data and tidying it to be able to use it in your downstream workflow) is describes as data wrangling. As mentioned in the R for data science book: “Together, tidying and transforming are called wrangling because getting your data in a form that’s natural to work with often feels like a fight!” https://r4ds.hadley.nz/intro. With the tidyverse and some level of experience your fight will become less and less over time.\nSince the R community is huge, there is also an overwhelming number of resources (like books, tutorials, videos, blog posts, stack-exchange content) that all want to teach, educate and inform you about R in one way or the other. Also, there are again collections of R resources, and even collections of collections of R resources….\nThese tutorials and courses have one thing in common, they start of with installing R and Rstudio and learning the software. How nice would it be if we can skip these (often) nasty installations? What if we can skip version updating and package installations and start working with your data right away? That would be amazing! And this is possible with the development of webr by George Stagg and colleagues https://github.com/r-wasm/webr.\n\nIt is R in the browser!\n\nThis is so great, because it provides the most convenient, quick and easy way to enter the R world. It is just like you having your Excel, Word and Powerpoint always immediately up and running by a click of a button. Since with R we type in our commands instead of pointing and clicking we are in the era of type-and-click to get your data science done.\nThis book is completely written using quarto and webr and allows you to typ in the code and run it right in the browser."
  },
  {
    "objectID": "swim_cars.html#exercises",
    "href": "swim_cars.html#exercises",
    "title": "2  Plotting cars",
    "section": "2.2 Exercises",
    "text": "2.2 Exercises\n\n2.2.1 Adding layers and changing the MTCARS plot\n\n\n\n\n\n\nExercise 1\n\n\n\nGive the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the alpha argument it should be a number from 0 to 1.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 1\n\n\n\n\n\nPlease note that the alpha we added is not part of an aesthetics (aes), meaning that the value of the alpha is not linked with a parameter in our data.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nAdd a layer that will generate a smooth linear regression line that shows the relation between mpg and disp. Use the stat_smooth command for this.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 2\n\n\n\n\n\nPlease make sure that the ggplot is not separates into groups, if the data is grouped by color or shape the regression line for each group will be generated.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nUse the facet_wrap command to make three separate plots for each cylinder.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Exercise 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n2.2.2 Fixing common errors\nBelow is some code that is not working properly, because of coding semantics mistakes. Can you spot (and fix) the errors?\n\n\n\n\n\n\nFix error 1\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 1\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nCommas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing ,.\n\n\n\n\n\n\n\n\n\nFix error 2\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 2\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nGgplot layers are added with a + not with the pipe term.\n\n\n\n\n\n\n\n\n\nFix error 3\n\n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 3\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nMake sure that the end of a layer or line of code is not followed up with a + or %>%.\n\n\n\n\n\n\n\n\n\nFix error 4\n\n\n\nThis is an error that is not apparent from an error message that R generates for you. However, the code does not give you what you want. The plot should show the cyl parameter in different shapes, just like there are three different colors for each level of the cyl parameter.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\n\n\nSolution to Error 4\n\n\n\n\n\nLoading\n  webR...\n\n\n  \n\n\nThe shape argument should be included in the aesthetics (aes) part of the ggplot"
  },
  {
    "objectID": "swim_cars.html#read-learn-and-code",
    "href": "swim_cars.html#read-learn-and-code",
    "title": "2  Plotting cars",
    "section": "2.1 Read, learn and code",
    "text": "2.1 Read, learn and code\nFirst, let’s make a simple scatter plot. We use a famous dataset that is used in R a lot for educational puposes. This is the mtcars dataset (mtcars = “Motor Trend Car Road Tests”). See parameter overview and documentation for info about the mtcars dataset. We can always call this dataset when using R, it is one of many datasets available from base R or tidyverse packages.\nFirst, we will inspect the dataset. For this we will load the tidyverse:\nLoading\n  webR...\n\n\n  \n\n\nOnce tidyverse is loaded via the library call, it is loaded in your current session in your browser, so you do not have to load it each time. Next have a look at the full dataset.\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\nor\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nThe pipe %>% operator\n\n\n\n\n\nThe %>% operator is a huge component of the tidy way of working. In R we now also have a “native” pipe that we can also use. This is the |> operator. For a history of the pipe in R see this blogpost.\nLoading\n  webR...\n\n\n  \n\n\n\n\n\nLet’s select a small part of the data using select from the dplyr package:\nLoading\n  webR...\n\n\n  \n\n\nNext, make a simple plot with the miles per gallon (mpg) and dispension parameters (disp) in the mtcars dataset.\nLoading\n  webR...\n\n\n  \n\n\nThis is a very basic plot, without much formatting. Let’s make it prettier!\nAdd color and bring in a third parameter:\nLoading\n  webR...\n\n\n  \n\n\nHere we need to have a look at data-types. The cyl parameters is a numerical parameter. GGplot automatically assumes we want a continous scale for this. Instead the cyl is more of a categorical data type there are either 4, 6 or 8 cylinders in each car so we can make the cyl parameter categorical like this:\nLoading\n  webR...\n\n\n  \n\n\nIf you want to have different color you can use one of the many color pallettes that are available:\nLoading\n  webR...\n\n\n  \n\n\nApart from color you can change the shape of the datapoints:\nLoading\n  webR...\n\n\n  \n\n\nGGplot can use different themes for your plots and there are many many options to tweak your plots to the way you like\nLet’s change titles:\nLoading\n  webR...\n\n\n  \n\n\nChange the plotting theme and base size of the elements:\nLoading\n  webR...\n\n\n  \n\n\nChange the scaling of the axes. It is good practice to plot graphs from zero:\nLoading\n  webR...\n\n\n  \n\n\nNow the datapoints at the maxima of the axis are not completely visible so it would be nice that we have some more space:\nLoading\n  webR...\n\n\n  \n\n\nNow we have generated a nice visualisation of our data using ggplot. Please note that ggplot uses layers and we added each time a different layer of information to the ggplot. If you want you can go wild with ggplot. Please find a nice overview of visualisations using ggplot, tidy and R from Cedric Scherer. Also the underlying R code is available for those plots."
  }
]
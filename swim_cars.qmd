---
title: "Plotting cars"
webr:
  packages: ['tidyverse']
editor: 
  mode: source  
---

## Read, learn and code

First, let's make a simple scatter plot. We use a famous dataset that is used in R a lot for educational puposes. This is the `mtcars` dataset (mtcars = "Motor Trend Car Road Tests"). See [parameter overview](https://rstudio-pubs-static.s3.amazonaws.com/61800_faea93548c6b49cc91cd0c5ef5059894.html) and [documentation](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars) for info about the `mtcars` dataset. We can always call this dataset when using R, it is one of many datasets available from base R or tidyverse packages.

First, we will inspect the dataset. For this we will load the tidyverse:

``` {webr-r}

library(tidyverse)

```

Once tidyverse is loaded via the `library` call, it is loaded in your current session in your browser, so you do not have to load it each time. Next have a look at the full dataset.

``` {webr-r}

mtcars

```

or 

``` {webr-r}

#if you get an error here, 
# please load the library call to tidyverse
mtcars %>% glimpse()
```

or

``` {webr-r}

mtcars %>% head()
```

or

``` {webr-r}

mtcars %>% tail()
```

::: {.callout-note collapse="true"}
## The pipe %>% operator

The `%>%` operator is a huge component of the tidy way of working. In R we now also have a "native" pipe that we can also use. This is the `|>` operator. For a history of the pipe in R see this [blogpost](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/).

``` {webr-r}

mtcars %>% head() 

#gives the same results as:
mtcars |> head()

```
:::

Let's select a small part of the data using `select` from the `dplyr` package:

``` {webr-r}

mtcars %>% 
    select(mpg, disp)
  
```

Next, make a simple plot with the miles per gallon (`mpg`) and dispension parameters (`disp`) in the `mtcars` dataset.

``` {webr-r}

mtcars %>% 
    select(mpg, disp) %>%
    ggplot(aes(x = mpg, y = disp))+
        geom_point(size = 4)
  
```

This is a very basic plot, without much formatting. Let's make it prettier!

Add color and bring in a third parameter:

``` {webr-r}

mtcars %>% 
    #added cyl to the selection here
    select(mpg, disp, cyl) %>% 
    ggplot(aes(x = mpg, y = disp,
    #added color to the aesthetics here
               color = cyl))+ 
        geom_point(size = 4)
  
```

Here we need to have a look at data-types. The `cyl` parameters is a numerical parameter. GGplot automatically assumes we want a continous scale for this. Instead the `cyl` is more of a categorical data type there are either 4, 6 or 8 cylinders in each car so we can make the `cyl` parameter categorical like this:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = as.factor(cyl)))+
        geom_point(size = 4)
  
```

If you want to have different color you can use one of the many color pallettes that are available:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = as.factor(cyl)))+
        geom_point(size = 4)+
  #I also manually changed the name of the legend here
        scale_color_brewer(name = "cylinders", 
                            palette = "Set2")
  
```

Apart from color you can change the shape of the datapoints:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = as.factor(cyl),
#please note to also add shape to the aesthetics here
                shape = as.factor(cyl)))+ 
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                            name = "cylinders")
  
```

GGplot can use different themes for your plots and there are many many options to tweak your plots to the way you like

Let's change titles:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")
```

Change the plotting theme and base size of the elements:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        theme_bw(base_size = 20)
```

Change the scaling of the axes. It is good practice to plot graphs from zero:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(limits = c(0, NA),
                           expand = c(0,NA))+
        scale_y_continuous(limits = c(0, NA),
                            expand = c(0,NA))+
        theme_bw(base_size = 20)
```

Now the datapoints at the maxima of the axis are not completely visible so it would be nice that we have some more space:

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
```

Now we have generated a nice visualisation of our data using `ggplot`. Please note that `ggplot` uses layers and we added each time a different layer of information to the ggplot. If you want you can go wild with ggplot. Please find a nice [overview](https://www.cedricscherer.com/2019/12/30/best-tidytuesday-2019/) of visualisations using ggplot, tidy and R from Cedric Scherer. Also the underlying R code is available for those plots.

## Exercises

### Adding layers and changing the MTCARS plot

::: callout-tip
#### Exercise 1

Give the points in the ggplot some transparency (or opacity), so that individual points are better visible. TIP: use the `alpha` argument it should be a number from 0 to 1.

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4,
                   #type your extra code here:

                    )+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Exercise 1

Please note that the alpha we added is not part of an aesthetics (`aes`), meaning that the value of the alpha is not linked with a parameter in our data. 

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
                color = as.factor(cyl),
                shape = as.factor(cyl)))+
        geom_point(size = 4,
                   #type your extra code here:
                    alpha = 0.7
                    )+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                        name = "cylinders")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
```

:::

::: callout-tip
#### Exercise 2

Add a layer that will generate a smooth linear regression line that shows the relation between `mpg` and `disp`. Use the `stat_smooth` command for this.

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp))+
        geom_point(size = 4,
                    alpha = 0.7)+
        # enter code here
        
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Exercise 2

Please make sure that the ggplot is not separates into groups, if the data is grouped by `color` or `shape` the regression line for each group will be generated.

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp))+
        geom_point(size = 4,
                    alpha = 0.7)+
        # enter code here
        stat_smooth(geom = "line",
                    method = "lm",
                    formula = "y ~ x")+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
```

:::

::: callout-tip
#### Exercise 3

Use the `facet_wrap` command to make three separate plots for each cylinder.

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp))+
        geom_point(size = 4,
                    alpha = 0.7)+
        
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)
        # enter code here 
        #(and don't forget to at a plus to the last line)

```
:::

::: {.callout-caution collapse="true"}
#### Solution to Exercise 3


``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp))+
        geom_point(size = 4,
                    alpha = 0.7)+
        labs(title = "My cool MTCARS plot",
                x = "miles per gallon",
                y = "dispension")+
        scale_x_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        scale_y_continuous(
              limits = c(0, NA),
              expand = expansion(mult = c(0, 0.1)))+
        theme_bw(base_size = 20)+
        facet_wrap(~cyl)
```

:::

### Fixing common errors

Below is some code that is not working properly, because of coding semantics mistakes. Can you spot (and fix) the errors?

::: callout-important
#### Fix error 1

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp
               color = cyl))+
        geom_point(size = 4)
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Error 1

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, #the error was in this line
               color = cyl))+
        geom_point(size = 4)
```

Commas are often forgotten, but easily fixed. Within brackets arguments are separated with commas. R also generates an error that is helpful and can point you to the missing `,`.
:::

::: callout-important
#### Fix error 2

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
               color = cyl)) %>% 
        geom_point(size = 4)
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Error 2

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp, 
               color = cyl))+ #the error was in this line
        geom_point(size = 4)
```

Ggplot layers are added with a `+` not with the `pipe` term.
:::

::: callout-important
#### Fix error 3

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp
               color = cyl)) +
        geom_point(size = 4) +
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Error 3

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = cyl))+
        geom_point(size = 4) #the error was in this line
```

Make sure that the end of a layer or line of code is not followed up with a `+` or `%>%`.
:::

::: callout-important
#### Fix error 4

This is an error that is not apparent from an error message that R generates for you. However, the code does not give you what you want. The plot should show the `cyl` parameter in different shapes, just like there are three different colors for each level of the `cyl` parameter.

``` {webr-r}

mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = as.factor(cyl)),
                shape = as.factor(cyl))+ 
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                            name = "cylinders")
```
:::

::: {.callout-caution collapse="true"}
#### Solution to Error 4

``` {webr-r}
mtcars %>% 
    select(mpg, cyl, disp) %>%
    ggplot(aes(x = mpg, y = disp,
               color = as.factor(cyl), #parenthesis error here
                shape = as.factor(cyl)))+ 
        geom_point(size = 4)+
        scale_color_brewer(name = "cylinders",
                            palette = "Set2")+
        scale_shape(solid = TRUE,
                            name = "cylinders")
```

The `shape` argument should be included in the aesthetics (`aes`) part of the ggplot
:::
